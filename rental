 

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

public class Rental {
    private String rentalDate;
    private String plannedReturnDate;
    private String actualReturnDate;
    private double basePricePerDay;
    private double penalty;
    private double discount;
    private String customerId;
    private String plateNumber;
    private boolean isLate;
    private boolean isReturned;
    private boolean hasDamage;
    private boolean isPaid;
    private int rentalDays;
    
    public static final double WEEKLY_DISCOUNT = 0.10;  // 10% for rentals >7 days
    public static final double MONTHLY_DISCOUNT = 0.15; // 15% for rentals >30 days
    public static final double LOYALTY_DISCOUNT = 0.05; // 5% for loyal customers
    
    // Penalty rates
    public static final double LATE_PENALTY_PER_DAY = 20.0;
    public static final double DAMAGE_PENALTY = 100.0;
    
    public static double calculateRentalDiscount(int rentalDays, boolean isLoyalCustomer) {
        double discount = 0;
        
        if (rentalDays > 30) {
            discount = MONTHLY_DISCOUNT;
        } else if (rentalDays > 7) {
            discount = WEEKLY_DISCOUNT;
        }
        
        if (isLoyalCustomer) {
            discount += LOYALTY_DISCOUNT;
        }
        
        return Math.min(discount, 0.25); // Cap total discount at 25%
    }
    
    public static double calculateLatePenalty(int lateDays) {
        return lateDays * LATE_PENALTY_PER_DAY;
    }
    
    public static double calculateDamagePenalty(boolean hasDamage) {
        return hasDamage ? DAMAGE_PENALTY : 0;
    }
    public Rental(String rentalDate, String plannedReturnDate, double basePricePerDay, 
                 String customerId, String plateNumber) {
        this.rentalDate = rentalDate;
        this.plannedReturnDate = plannedReturnDate;
        this.basePricePerDay = basePricePerDay;
        this.customerId = customerId;
        this.plateNumber = plateNumber;
        this.penalty = 0;
        this.discount = 0;
        this.isLate = false;
        this.isReturned = false;
        this.hasDamage = false;
        this.isPaid = false;
        this.rentalDays = (int) ChronoUnit.DAYS.between(
            LocalDate.parse(rentalDate), 
            LocalDate.parse(plannedReturnDate)
        );
    }
    
    public void processReturn(String actualReturnDate, boolean hasDamage, boolean isLoyalCustomer) {
        this.actualReturnDate = actualReturnDate;
        this.isReturned = true;
        this.hasDamage = hasDamage;
        
        LocalDate start = LocalDate.parse(rentalDate);
        LocalDate plannedEnd = LocalDate.parse(plannedReturnDate);
        LocalDate actualEnd = LocalDate.parse(actualReturnDate);
        
        // Calculate actual rental days
        this.rentalDays = (int) ChronoUnit.DAYS.between(start, actualEnd);
        
        // Check if late
        if (actualEnd.isAfter(plannedEnd)) {
            int lateDays = (int) ChronoUnit.DAYS.between(plannedEnd, actualEnd);
            this.isLate = true;
            this.penalty = RentalPolicy.calculateLatePenalty(lateDays);
        }
        
        // Calculate discount based on planned rental days
        int plannedDays = (int) ChronoUnit.DAYS.between(start, plannedEnd);
        this.discount = RentalPolicy.calculateRentalDiscount(plannedDays, isLoyalCustomer) * 
                       basePricePerDay * plannedDays;
        
        // Add damage penalty if any
        this.penalty += RentalPolicy.calculateDamagePenalty(hasDamage);
    }
    
    public double getFinalAmount() {
        return (basePricePerDay * rentalDays) + penalty - discount;
    }
    
    // Getters and setters
    public String getRentalDate() { return rentalDate; }
    public String getPlannedReturnDate() { return plannedReturnDate; }
    public String getActualReturnDate() { return actualReturnDate; }
    public double getBasePricePerDay() { return basePricePerDay; }
    public double getPenalty() { return penalty; }
    public double getDiscount() { return discount; }
    public String getCustomerId() { return customerId; }
    public String getPlateNumber() { return plateNumber; }
    public boolean isLate() { return isLate; }
    public boolean isReturned() { return isReturned; }
    public boolean hasDamage() { return hasDamage; }
    public boolean isPaid() { return isPaid; }
    public int getRentalDays() { return rentalDays; }
    public int getLateDays() {
        if (!isLate) return 0;
        return (int) ChronoUnit.DAYS.between(
            LocalDate.parse(plannedReturnDate),
            LocalDate.parse(actualReturnDate)
        );
    }
    
    public void setPaid(boolean paid) { isPaid = paid; }
    
    @Override
    public String toString() {
        return String.format("Rental [%s to %s] - Vehicle: %s - Customer: %s - Amount: RM%.2f",
                rentalDate, 
                isReturned ? actualReturnDate : plannedReturnDate,
                plateNumber, 
                customerId,
                getFinalAmount());
    }
    
    public String toFileString() {
        return String.join(",",
            rentalDate,
            plannedReturnDate,
            actualReturnDate != null ? actualReturnDate : "",
            String.valueOf(basePricePerDay),
            String.valueOf(penalty),
            String.valueOf(discount),
            customerId,
            plateNumber,
            String.valueOf(isLate),
            String.valueOf(isReturned),
            String.valueOf(hasDamage),
            String.valueOf(isPaid),
            String.valueOf(rentalDays)
        );
    }

    public static Rental fromFileString(String fileString) {
        String[] parts = fileString.split(",");
        Rental rental = new Rental(
            parts[0], 
            parts[1], 
            Double.parseDouble(parts[3]),
            parts[6],
            parts[7]
        );
        
        if (!parts[2].isEmpty()) {
            rental.actualReturnDate = parts[2];
        }
        
        rental.penalty = Double.parseDouble(parts[4]);
        rental.discount = Double.parseDouble(parts[5]);
        rental.isLate = Boolean.parseBoolean(parts[8]);
        rental.isReturned = Boolean.parseBoolean(parts[9]);
        rental.hasDamage = Boolean.parseBoolean(parts[10]);
        rental.isPaid = Boolean.parseBoolean(parts[11]);
        rental.rentalDays = Integer.parseInt(parts[12]);
        
        return rental;
    }
}
